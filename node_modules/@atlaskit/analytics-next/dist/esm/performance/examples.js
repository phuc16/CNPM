import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React, { useCallback } from 'react';
import { fireEvent } from '@testing-library/react';
import AnalyticsListener from '../components/AnalyticsListener';
import withAnalyticsContext from '../hocs/withAnalyticsContext';
import withAnalyticsEvents from '../hocs/withAnalyticsEvents';
import { useAnalyticsEvents } from '../hooks/useAnalyticsEvents';
import { useCallbackWithAnalytics } from '../hooks/useCallbackWithAnalytics';
import { usePlatformLeafEventHandler } from '../hooks/usePlatformLeafEventHandler';
import createAndFireEvent from '../utils/createAndFireEvent';

var ButtonWithUsePlatformLeafEventHandlerHook = function ButtonWithUsePlatformLeafEventHandlerHook(_ref) {
  var providedOnClick = _ref.onClick;
  var onClick = usePlatformLeafEventHandler({
    fn: providedOnClick,
    componentName: 'perf-test-button',
    packageName: '@atlaskit/perf-test-button',
    packageVersion: '0.1.0',
    action: 'clicked',
    analyticsData: {
      additionalData: true
    }
  });
  return /*#__PURE__*/React.createElement("button", {
    onClick: onClick,
    "data-testid": "button"
  }, "Click me");
};

var ButtonWithUseAnalyticsEventHook = withAnalyticsContext({
  componentName: 'perf-test-button',
  packageName: '@atlaskit/perf-test-button',
  packageVersion: '0.1.0',
  additionalData: true
})(function (_ref2) {
  var providedOnClick = _ref2.onClick;

  var _useAnalyticsEvents = useAnalyticsEvents(),
      createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;

  var onClick = useCallback(function (mouseEvt) {
    var analyticsEvent = createAnalyticsEvent({
      action: 'clicked',
      actionSubject: 'perf-test-button',
      attributes: {
        componentName: 'perf-test-button',
        packageName: '@atlaskit/perf-test-button',
        packageVersion: '0.1.0'
      }
    });
    analyticsEvent.fire('atlaskit');
    providedOnClick(mouseEvt);
  }, [providedOnClick, createAnalyticsEvent]);
  return /*#__PURE__*/React.createElement("button", {
    onClick: onClick,
    "data-testid": "button"
  }, "Click me");
});
var ButtonWithUseCallbackWithAnalyticsHook = withAnalyticsContext({
  componentName: 'perf-test-button',
  packageName: '@atlaskit/perf-test-button',
  packageVersion: '0.1.0',
  additionalData: true
})(function (_ref3) {
  var providedOnClick = _ref3.onClick;
  var onClick = useCallbackWithAnalytics(providedOnClick, {
    action: 'clicked',
    actionSubject: 'perf-test-button',
    attributes: {
      componentName: 'perf-test-button',
      packageName: '@atlaskit/perf-test-button',
      packageVersion: '0.1.0'
    }
  }, 'atlaskit');
  return /*#__PURE__*/React.createElement("button", {
    onClick: onClick,
    "data-testid": "button"
  }, "Click me");
});
var ButtonWithHOCs = withAnalyticsContext({
  componentName: 'perf-test-button',
  packageName: '@atlaskit/perf-test-button',
  packageVersion: '0.1.0',
  additionalData: true
})(withAnalyticsEvents({
  onClick: createAndFireEvent('atlaskit')({
    action: 'clicked',
    actionSubject: 'perf-test-button',
    attributes: {
      componentName: 'perf-test-button',
      packageName: '@atlaskit/perf-test-button',
      packageVersion: '0.1.0'
    }
  })
})(function (_ref4) {
  var onClick = _ref4.onClick;
  return /*#__PURE__*/React.createElement("button", {
    onClick: onClick,
    "data-testid": "button"
  }, "Click me");
}));

var createEventHandler = function createEventHandler() {
  var done = function done() {};

  var promise;

  var onEvent = function onEvent() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    done(args);
  };

  var create = function create() {
    promise = new Promise(function (resolve) {
      done = resolve;
    });
  };

  var getPromise = function getPromise() {
    return promise;
  };

  return {
    onEvent: onEvent,
    create: create,
    getPromise: getPromise
  };
};

var eventHandler = createEventHandler();

var WithListener = function WithListener(Component) {
  return function () {
    eventHandler.create();
    var onEvent = eventHandler.onEvent;

    var onClick = function onClick() {};

    return /*#__PURE__*/React.createElement(AnalyticsListener, {
      channel: "atlaskit",
      onEvent: onEvent
    }, /*#__PURE__*/React.createElement(Component, {
      onClick: onClick
    }));
  };
};

var interactionTasks = [{
  name: 'Dispatch event',
  description: 'Recording how long it takes to fire and receive an event on the listener',
  run: function () {
    var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref5) {
      var container, button;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              container = _ref5.container;
              button = container.querySelector('button');

              if (!(button == null)) {
                _context.next = 4;
                break;
              }

              throw new Error('Could not find button element');

            case 4:
              fireEvent.click(button);
              _context.next = 7;
              return eventHandler.getPromise();

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function run(_x) {
      return _run.apply(this, arguments);
    }

    return run;
  }()
}];
export var UsePlatformLeafEventHandlerHookTest = WithListener(ButtonWithUsePlatformLeafEventHandlerHook);
export var UseAnalyticsEventHookTest = WithListener(ButtonWithUseAnalyticsEventHook);
export var UseCallbackWithAnalyticsHookTest = WithListener(ButtonWithUseCallbackWithAnalyticsHook);
export var HOCSTest = WithListener(ButtonWithHOCs);
UsePlatformLeafEventHandlerHookTest.story = {
  name: 'usePlatformLeafEventHandler based component',
  component: UsePlatformLeafEventHandlerHookTest,
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};
UseAnalyticsEventHookTest.story = {
  name: 'useAnalyticsEvent based component',
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};
UseCallbackWithAnalyticsHookTest.story = {
  name: 'useCallbackWithAnalytics based component',
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};
HOCSTest.story = {
  name: 'HOC based component',
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};