import { ThemeModes } from '@atlaskit/theme/types';
import { Appearance } from './types';
export declare const containerStyles: (appearance: Appearance, mode: ThemeModes, width?: string | number | undefined) => {
    readonly borderRadius: 3;
    readonly borderWidth: 2;
    readonly borderStyle: "none" | "solid";
    readonly boxSizing: "border-box";
    readonly display: "flex";
    readonly flex: "1 1 100%";
    readonly fontSize: number;
    readonly justifyContent: "space-between";
    readonly maxWidth: string | number;
    readonly overflow: "hidden";
    readonly transition: "background-color 0.2s ease-in-out, border-color 0.2s ease-in-out";
    readonly wordWrap: "break-word";
    readonly verticalAlign: "top";
    readonly pointerEvents: "auto";
    readonly backgroundColor: string;
    readonly borderColor: string;
    readonly color: "var(--ds-text-highEmphasis)";
    readonly cursor: string;
    readonly '&:hover': {
        backgroundColor: string;
    };
    readonly '&:focus-within': {
        backgroundColor: string;
        borderColor: string;
    };
    readonly '&[data-disabled]': {
        backgroundColor: "var(--ds-background-disabled)";
        borderColor: "var(--ds-background-disabled)";
        color: "var(--ds-text-disabled)";
        cursor: string;
    };
    readonly '&[data-invalid]': {
        borderColor: "var(--ds-iconBorder-danger)";
    };
    readonly '&[data-invalid]:focus-within': {
        backgroundColor: "var(--ds-background-default)";
        borderColor: "var(--ds-border-focus)";
    };
    readonly '@media screen and (-ms-high-contrast: active)': {
        '&[data-invalid]:focus-within': {
            borderColor: string;
        };
        '&:focus-within': {
            borderColor: string;
        };
        '&[data-disabled]': {
            borderColor: string;
        };
    };
    readonly alignItems: "center";
};
export declare const inputStyles: (mode: ThemeModes) => {
    readonly backgroundColor: "transparent";
    readonly border: 0;
    readonly boxSizing: "border-box";
    readonly color: "inherit";
    readonly cursor: "inherit";
    readonly fontSize: number;
    readonly minWidth: "0";
    readonly outline: "none";
    readonly width: "100%";
    readonly lineHeight: number;
    readonly fontFamily: string;
    readonly '&[data-monospaced]': {
        readonly fontFamily: string;
    };
    readonly '&[data-compact]': {
        readonly padding: string;
        readonly height: string;
    };
    readonly '&:not([data-compact])': {
        readonly padding: string;
        readonly height: string;
    };
    readonly '&[disabled]': {
        readonly WebkitTextFillColor: "var(--ds-text-disabled)";
    };
    readonly '&::-ms-clear': {
        readonly display: "none";
    };
    readonly '&:invalid': {
        readonly boxShadow: "none";
    };
    readonly '&::placeholder': {
        readonly color: "var(--ds-text-lowEmphasis)";
        readonly '&:disabled': {
            readonly color: "var(--ds-text-disabled)";
        };
    };
    readonly '@media screen and (-ms-high-contrast: active)': {
        readonly '&[disabled]': {
            readonly color: "GrayText";
        };
    };
};
export declare const textFieldColors: {
    backgroundColor: {
        standard: {
            light: "var(--ds-background-subtleBorderedNeutral-resting)";
            dark: "var(--ds-background-subtleBorderedNeutral-resting)";
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    backgroundColorFocus: {
        standard: {
            light: "var(--ds-background-default)";
            dark: "var(--ds-background-default)";
        };
        subtle: {
            light: "var(--ds-background-default)";
            dark: "var(--ds-background-default)";
        };
        none: {
            light: string;
            dark: string;
        };
    };
    backgroundColorHover: {
        standard: {
            light: "var(--ds-background-default)";
            dark: "var(--ds-background-default)";
        };
        subtle: {
            light: "var(--ds-background-transparentNeutral-hover)";
            dark: "var(--ds-background-transparentNeutral-hover)";
        };
        none: {
            light: string;
            dark: string;
        };
    };
    borderColor: {
        standard: {
            light: "var(--ds-border-neutral)";
            dark: "var(--ds-border-neutral)";
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    borderColorFocus: {
        standard: {
            light: "var(--ds-border-focus)";
            dark: "var(--ds-border-focus)";
        };
        subtle: {
            light: "var(--ds-border-focus)";
            dark: "var(--ds-border-focus)";
        };
        none: {
            light: string;
            dark: string;
        };
    };
    placeholderTextColor: {
        light: "var(--ds-text-lowEmphasis)";
        dark: "var(--ds-text-lowEmphasis)";
    };
    textColor: {
        light: "var(--ds-text-highEmphasis)";
        dark: "var(--ds-text-highEmphasis)";
    };
    invalidRules: {
        light: {
            backgroundColor: "var(--ds-background-subtleBorderedNeutral-resting)";
            backgroundColorHover: "var(--ds-background-default)";
            backgroundColorFocus: "var(--ds-background-default)";
            borderColor: "var(--ds-iconBorder-danger)";
            borderColorFocus: "var(--ds-border-focus)";
        };
        dark: {
            backgroundColor: "var(--ds-background-subtleBorderedNeutral-resting)";
            backgroundColorHover: "var(--ds-background-default)";
            backgroundColorFocus: "var(--ds-background-default)";
            borderColor: "var(--ds-iconBorder-danger)";
            borderColorFocus: "var(--ds-border-focus)";
        };
    };
    disabledRules: {
        light: {
            backgroundColor: "var(--ds-background-disabled)";
            backgroundColorHover: "var(--ds-background-disabled)";
            borderColor: "var(--ds-background-disabled)";
            textColor: "var(--ds-text-disabled)";
        };
        dark: {
            backgroundColor: "var(--ds-background-disabled)";
            backgroundColorHover: "var(--ds-background-disabled)";
            borderColor: "var(--ds-background-disabled)";
            textColor: "var(--ds-text-disabled)";
        };
    };
};
