"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HOCSTest = exports.UseCallbackWithAnalyticsHookTest = exports.UseAnalyticsEventHookTest = exports.UsePlatformLeafEventHandlerHookTest = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireWildcard(require("react"));

var _react2 = require("@testing-library/react");

var _AnalyticsListener = _interopRequireDefault(require("../components/AnalyticsListener"));

var _withAnalyticsContext = _interopRequireDefault(require("../hocs/withAnalyticsContext"));

var _withAnalyticsEvents = _interopRequireDefault(require("../hocs/withAnalyticsEvents"));

var _useAnalyticsEvents2 = require("../hooks/useAnalyticsEvents");

var _useCallbackWithAnalytics = require("../hooks/useCallbackWithAnalytics");

var _usePlatformLeafEventHandler = require("../hooks/usePlatformLeafEventHandler");

var _createAndFireEvent = _interopRequireDefault(require("../utils/createAndFireEvent"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ButtonWithUsePlatformLeafEventHandlerHook = function ButtonWithUsePlatformLeafEventHandlerHook(_ref) {
  var providedOnClick = _ref.onClick;
  var onClick = (0, _usePlatformLeafEventHandler.usePlatformLeafEventHandler)({
    fn: providedOnClick,
    componentName: 'perf-test-button',
    packageName: '@atlaskit/perf-test-button',
    packageVersion: '0.1.0',
    action: 'clicked',
    analyticsData: {
      additionalData: true
    }
  });
  return /*#__PURE__*/_react.default.createElement("button", {
    onClick: onClick,
    "data-testid": "button"
  }, "Click me");
};

var ButtonWithUseAnalyticsEventHook = (0, _withAnalyticsContext.default)({
  componentName: 'perf-test-button',
  packageName: '@atlaskit/perf-test-button',
  packageVersion: '0.1.0',
  additionalData: true
})(function (_ref2) {
  var providedOnClick = _ref2.onClick;

  var _useAnalyticsEvents = (0, _useAnalyticsEvents2.useAnalyticsEvents)(),
      createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;

  var onClick = (0, _react.useCallback)(function (mouseEvt) {
    var analyticsEvent = createAnalyticsEvent({
      action: 'clicked',
      actionSubject: 'perf-test-button',
      attributes: {
        componentName: 'perf-test-button',
        packageName: '@atlaskit/perf-test-button',
        packageVersion: '0.1.0'
      }
    });
    analyticsEvent.fire('atlaskit');
    providedOnClick(mouseEvt);
  }, [providedOnClick, createAnalyticsEvent]);
  return /*#__PURE__*/_react.default.createElement("button", {
    onClick: onClick,
    "data-testid": "button"
  }, "Click me");
});
var ButtonWithUseCallbackWithAnalyticsHook = (0, _withAnalyticsContext.default)({
  componentName: 'perf-test-button',
  packageName: '@atlaskit/perf-test-button',
  packageVersion: '0.1.0',
  additionalData: true
})(function (_ref3) {
  var providedOnClick = _ref3.onClick;
  var onClick = (0, _useCallbackWithAnalytics.useCallbackWithAnalytics)(providedOnClick, {
    action: 'clicked',
    actionSubject: 'perf-test-button',
    attributes: {
      componentName: 'perf-test-button',
      packageName: '@atlaskit/perf-test-button',
      packageVersion: '0.1.0'
    }
  }, 'atlaskit');
  return /*#__PURE__*/_react.default.createElement("button", {
    onClick: onClick,
    "data-testid": "button"
  }, "Click me");
});
var ButtonWithHOCs = (0, _withAnalyticsContext.default)({
  componentName: 'perf-test-button',
  packageName: '@atlaskit/perf-test-button',
  packageVersion: '0.1.0',
  additionalData: true
})((0, _withAnalyticsEvents.default)({
  onClick: (0, _createAndFireEvent.default)('atlaskit')({
    action: 'clicked',
    actionSubject: 'perf-test-button',
    attributes: {
      componentName: 'perf-test-button',
      packageName: '@atlaskit/perf-test-button',
      packageVersion: '0.1.0'
    }
  })
})(function (_ref4) {
  var onClick = _ref4.onClick;
  return /*#__PURE__*/_react.default.createElement("button", {
    onClick: onClick,
    "data-testid": "button"
  }, "Click me");
}));

var createEventHandler = function createEventHandler() {
  var done = function done() {};

  var promise;

  var onEvent = function onEvent() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    done(args);
  };

  var create = function create() {
    promise = new Promise(function (resolve) {
      done = resolve;
    });
  };

  var getPromise = function getPromise() {
    return promise;
  };

  return {
    onEvent: onEvent,
    create: create,
    getPromise: getPromise
  };
};

var eventHandler = createEventHandler();

var WithListener = function WithListener(Component) {
  return function () {
    eventHandler.create();
    var onEvent = eventHandler.onEvent;

    var onClick = function onClick() {};

    return /*#__PURE__*/_react.default.createElement(_AnalyticsListener.default, {
      channel: "atlaskit",
      onEvent: onEvent
    }, /*#__PURE__*/_react.default.createElement(Component, {
      onClick: onClick
    }));
  };
};

var interactionTasks = [{
  name: 'Dispatch event',
  description: 'Recording how long it takes to fire and receive an event on the listener',
  run: function () {
    var _run = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref5) {
      var container, button;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              container = _ref5.container;
              button = container.querySelector('button');

              if (!(button == null)) {
                _context.next = 4;
                break;
              }

              throw new Error('Could not find button element');

            case 4:
              _react2.fireEvent.click(button);

              _context.next = 7;
              return eventHandler.getPromise();

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function run(_x) {
      return _run.apply(this, arguments);
    }

    return run;
  }()
}];
var UsePlatformLeafEventHandlerHookTest = WithListener(ButtonWithUsePlatformLeafEventHandlerHook);
exports.UsePlatformLeafEventHandlerHookTest = UsePlatformLeafEventHandlerHookTest;
var UseAnalyticsEventHookTest = WithListener(ButtonWithUseAnalyticsEventHook);
exports.UseAnalyticsEventHookTest = UseAnalyticsEventHookTest;
var UseCallbackWithAnalyticsHookTest = WithListener(ButtonWithUseCallbackWithAnalyticsHook);
exports.UseCallbackWithAnalyticsHookTest = UseCallbackWithAnalyticsHookTest;
var HOCSTest = WithListener(ButtonWithHOCs);
exports.HOCSTest = HOCSTest;
UsePlatformLeafEventHandlerHookTest.story = {
  name: 'usePlatformLeafEventHandler based component',
  component: UsePlatformLeafEventHandlerHookTest,
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};
UseAnalyticsEventHookTest.story = {
  name: 'useAnalyticsEvent based component',
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};
UseCallbackWithAnalyticsHookTest.story = {
  name: 'useCallbackWithAnalytics based component',
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};
HOCSTest.story = {
  name: 'HOC based component',
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};